#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TPCSDKSwift",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Asset data returned by <code>TPCSDK.getCardAsset(...)</code>
SWIFT_CLASS("_TtC11TPCSDKSwift9CardAsset")
@interface CardAsset : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Â Card Asset Image size
typedef SWIFT_ENUM(NSInteger, CardAssetSize, open) {
/// Small
  CardAssetSizeS = 0,
/// Medium
  CardAssetSizeM = 1,
/// Large
  CardAssetSizeL = 2,
};

enum IsCardDigitizedResult : NSInteger;
@class PKPass;

/// Card digitization result details
/// seealso:
/// <code>TPCSDK.getCardDigitizationResult(card:primaryAccountIdentifier:)</code>
SWIFT_CLASS("_TtC11TPCSDKSwift22CardDigitizationResult")
@interface CardDigitizationResult : NSObject
/// Is card digitized on local and remote devices
@property (nonatomic) enum IsCardDigitizedResult result;
/// Is card digitized on local device
@property (nonatomic) enum IsCardDigitizedResult localDevice;
/// PKPass for the card on the remote device, nil if not digitized on local device
@property (nonatomic, strong) PKPass * _Nullable localPKPass;
/// Is card digitized on remote device
@property (nonatomic) enum IsCardDigitizedResult remoteDevice;
/// PKPass for the card on remote device, nil if not digitized on remote device
@property (nonatomic, strong) PKPass * _Nullable remotePKPass;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Card list returned by <code>TPCSDK.getCardList(...)</code>
SWIFT_CLASS("_TtC11TPCSDKSwift8CardList")
@interface CardList : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Card payment network
typedef SWIFT_ENUM(NSInteger, CardScheme, open) {
/// Mastercard
  CardSchemeMastercard = 0,
/// Visa
  CardSchemeVisa = 1,
};


/// Bank application to initialize this object with <code>CardScheme</code> and encryptedPayload
/// note:
/// Initialize <code>FundingCard</code> with Mastercard and Encrypted Payload
/// \code
/// let scheme         = CardScheme.Mastercard
/// let cardPayload    = "PKCS7 encrypted PAN"
///
/// let card           = FundingCard(scheme: scheme.
///                                  encryptedPayload: cardPayload)
///
/// \endcodenote:
/// Initialize <code>FundingCard</code> with Visa and Encrypted Payload
/// \code
/// let scheme         = CardScheme.Visa
/// let cardPayload    = "PKCS7 encrypted PAN"
///
/// let card           = FundingCard(scheme: scheme.
///                                  encryptedPayload: cardPayload)
///
/// \endcodenote:
/// Initialize <code>FundingCard</code> with Primary Account Identifier
/// \code
/// let cardIdentifier = "C-12345678"
///
/// let card           = FundingCard(primaryAccountIdentifier: cardIdentifier)
///
/// \endcode
SWIFT_CLASS("_TtC11TPCSDKSwift11FundingCard")
@interface FundingCard : NSObject
/// Constructor for FundingCard using Scheme and Encrypted Payload, or using Primary Account Identifier
/// note:
/// Initialize <code>FundingCard</code> with <code>CardScheme</code> and Encrypted Payload
/// \code
/// let card = FundingCard(scheme, cardPayload)
///
/// \endcode\param scheme <code>CardScheme</code>
///
/// \param encryptedPayload Card information encrypted in PKCS7
///
- (nonnull instancetype)initWithScheme:(enum CardScheme)scheme encryptedPayload:(NSString * _Nullable)encryptedPayload OBJC_DESIGNATED_INITIALIZER;
/// Constructor for FundingCard using Scheme and Encrypted Payload, or using Primary Account Identifier
/// note:
/// Initialize <code>FundingCard</code> with Primary Account Identifier
/// \code
/// let card = FundingCard(cardIdentifier)
///
/// \endcode\param primaryAccountIdentifier Primary Account Identifier of the payment card
///
- (nonnull instancetype)initWithPrimaryAccountIdentifier:(NSString * _Nullable)primaryAccountIdentifier OBJC_DESIGNATED_INITIALIZER;
/// Card information encrypted in PKCS7 using TIG TSH Certificate
@property (nonatomic, copy) NSString * _Nullable encryptedPayload;
/// Primary Account Identifier of the payment card
@property (nonatomic, copy) NSString * _Nullable primaryAccountIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Card Digitization Result
typedef SWIFT_ENUM(NSInteger, IsCardDigitizedResult, open) {
/// The current device or an attached device both supports adding this payment card and does not already contain a payment card with the supplied encrypted payload or primary account identifier.
  IsCardDigitizedResultCardNotDigitized = 0,
/// The current device or an attached device both contain a payment card with the supplied encrypted payload or primary account identifier.
  IsCardDigitizedResultCardAlreadyDigitized = 1,
/// Error while retrieving card digitization result.
  IsCardDigitizedResultError = 2,
};


/// Pending activation payment pass from local and remote device
SWIFT_CLASS("_TtC11TPCSDKSwift21PendingActivationPass")
@interface PendingActivationPass : NSObject
/// PKPass for the card on local device, nil if not digitized on local device
@property (nonatomic, strong) PKPass * _Nullable localPKPass;
/// PKPass for the card on remote device, nil if not digitized on remote device
@property (nonatomic, strong) PKPass * _Nullable remotePKPass;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Push method
SWIFT_CLASS("_TtC11TPCSDKSwift10PushMethod")
@interface PushMethod : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// SDK configuration result
typedef SWIFT_ENUM(NSInteger, SdkConfigureResult, open) {
/// SDK is configured for TPCSDK Push Provisioning
  SdkConfigureResultOK = 0,
/// SDK configuration failed due to Apple Pay not supported by the device or disabled by parental control
  SdkConfigureResultFail = 1,
/// SDK configuration failed
  SdkConfigureResultError = 2,
};

/// TPCSDK variant
typedef SWIFT_ENUM(NSInteger, SdkVariant, open) {
/// Pre-Production Environment
  SdkVariantPPROD = 0,
/// Production Environment
  SdkVariantPROD = 1,
};

@class UIViewController;
@protocol TPCSDKProvisionDelegate;
@class Token;
@class TokenRequestorAsset;
enum TokenState : NSInteger;
@class TokenRequestor;

/// TPCSDK for iOS
SWIFT_CLASS("_TtC11TPCSDKSwift6TPCSDK")
@interface TPCSDK : NSObject
/// This is the version of the TPCSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tpcsdkVersion;)
+ (NSString * _Nonnull)tpcsdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Reset SDK
+ (void)reset;
/// Configure SDK with <code>SdkVariant</code>  and Issuer ID.
/// note:
/// Using <code>SdkVariant</code> and Issuer ID
/// \code
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///   // Override point for customization after application launch.
///
///   let tpcVariant = SdkVariant.PROD
///   let tpcIssuerId = "TPC_ISSUER"
///   let result = TPCSDK.configure(variant: tpcVariant,
///                                issuerId: tpcIssuerId)
///   
///   return true
/// }
///
/// \endcode\code
/// - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
///   // Override point for [customization after application launch.
///   
///   SdkVariant tpcVariant = SdkVariantPROD;
///   NSString * tpcIssuerId = @"TPC_ISSUER";
///   SdkConfigureResult result = [TPCSDK configureWithVariant:tpcVariant
///                                                   issuerId:tpcIssuerId];
///
///   return YES;
/// }
///
/// \endcode\param variant Use SdkVariant.PPROD for Pre-Production server and SdkVariant.PROD for Production server.
///
/// \param issuerId Issuer ID is provided to you during onboarding process.
///
///
/// returns:
/// See <code>SdkConfigureResult</code>
+ (enum SdkConfigureResult)configureWithVariant:(enum SdkVariant)variant issuerId:(NSString * _Nonnull)issuerId SWIFT_WARN_UNUSED_RESULT;
/// Configure SDK with Server URL and Issuer ID.
/// note:
/// Using Server URL and Issuer ID
/// \code
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///   // Override point for customization after application launch.
///
///   let tpcServerUrl = "https://hapi.dbp.thalescloud.io/mg/tpc"
///   let tpcIssuerId  = "TPC_ISSUER"
///   let result = TPCSDK.configure(url: tpcServerUrl,
///                                 issuerId: tpcIssuerId)
///   
///   return true
/// }
///
/// \endcode\code
/// - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
///   // Override point for [customization after application launch.
///   
///   NSString * tpcServerUrl = @"https://hapi.dbp.thalescloud.io/mg/tpc";
///   NSString * tpcIssuerId = @"TPC_ISSUER";
///   SdkConfigureResult result = [TPCSDK configureWithUrl:tpcServerUrl
///                                               issuerId:tpcIssuerId];
///
///   return YES;
/// }
///
/// \endcode\param url Provide server URL without trailing slash (example: https://hapi.dbp.thalescloud.io).
///
/// \param issuerId Issuer ID is provided to you during onboarding process.
///
///
/// returns:
/// See <code>SdkConfigureResult</code>
+ (enum SdkConfigureResult)configureWithUrl:(NSString * _Nonnull)url issuerId:(NSString * _Nonnull)issuerId SWIFT_WARN_UNUSED_RESULT;
/// Check card digitization status with <code>FundingCard</code> or Primary Account Identifier.
/// important:
/// Display Add to Apple Wallet button if digitizeResult is <code>IsCardDigitizedResult.CardNotDigitized</code>.
/// seealso:
/// <code>TPCSDK.getCardDigitizationResult(card:completion:)</code> for details of card digitization result on current device or an attached device.
/// note:
/// Using <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
/// \code
/// TPCSDK.isCardDigitized(card: card) {
///   (primaryAccountIdentifier, digitizeResult) in
///   
///   switch digitizeResult {
///   case .CardNotDigitized:
///     // TODO: Display Add to Apple Wallet button
///     break
///   default: break
///   }
/// }
///
/// \endcode\code
/// [TPCSDK isCardDigitizedWithCard:card
///        primaryAccountIdentifier:NULL
///                      completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                   enum IsCardDigitizedResult digitizeResult) {
///   switch(digitizeResult) {
///     case IsCardDigitizedResultCardNotDigitized:
///       // TODO: Display Add to Apple Wallet button
///       break;
///       
///     default:
///       break;
///   }
/// }];
///
/// \endcodenote:
/// Using <code>FundingCard</code> object initialized with Primary Account Identifier
/// \code
/// TPCSDK.isCardDigitized(card: card) {
///   (primaryAccountIdentifier, digitizeResult) in
///   
///   switch digitizeResult {
///   case .CardNotDigitized:
///     // TODO: Display Add to Apple Wallet button
///     break
///   default: break
///   }
/// }
///
/// \endcode\code
/// [TPCSDK isCardDigitizedWithCard:card
///        primaryAccountIdentifier:NULL
///                      completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                   enum IsCardDigitizedResult digitizeResult) {
///   switch(digitizeResult) {
///     case IsCardDigitizedResultCardNotDigitized:
///       // TODO: Display Add to Apple Wallet button
///       break;
///       
///     default:
///       break;
///   }
/// }];
///
/// \endcodenote:
/// Using Primary Account Identifier
/// \code
/// TPCSDK.isCardDigitized(primaryAccountIdentifier: cardIdentifier) {
///   (digitizeResult) in
///   
///   switch digitizeResult {
///   case .CardNotDigitized:
///     // TODO: Display Add to Apple Wallet button
///     break
///   default:
///     // TODO: Hide Add to Apple Wallet button
///     break
///   }
/// }
///
/// \endcode\code
/// [TPCSDK isCardDigitizedWithCard:NULL
///        primaryAccountIdentifier:cardIdentifier
///                      completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                   enum IsCardDigitizedResult digitizeResult) {
///   switch(digitizeResult) {
///     case IsCardDigitizedResultCardNotDigitized:
///       // TODO: Display Add to Apple Wallet button
///       break;
///       
///     default:
///       // TODO: Hide Add to Apple Wallet button
///       break;
///   }
/// }];
///
/// \endcode\param card <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload, or <code>FundingCard</code> object initialized with Primary Account Identifier
///
/// \param primaryAccountIdentifier Primary Account Identifier of the payment card
///
/// \param digitizeResult See <code>IsCardDigitizedResult</code>
///
+ (void)isCardDigitizedWithCard:(FundingCard * _Nullable)card primaryAccountIdentifier:(NSString * _Nullable)primaryAccountIdentifier completion:(void (^ _Nonnull)(NSString * _Nullable, enum IsCardDigitizedResult))completion;
/// Get card digitization status, current device digitization status, current device digitized <code>PKPass</code> if available, remote device digitization status, and remote device digitized <code>PKPass</code> if available with Primary Account Identifier.
/// note:
/// Using <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
/// \code
/// TPCSDK.getCardDigitizationResult(card: card) {
///   (primaryAccountIdentifier, digitizeDetails) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardDigitizationResultWithCard:card
///                  primaryAccountIdentifier:NULL
///                                completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                             CardDigitizationResult * _Nonnull digitizeDetails) {
///   
/// }];
///
/// \endcodenote:
/// Using <code>FundingCard</code> object initialized with Primary Account Identifier
/// \code
/// TPCSDK.getCardDigitizationResult(card: card) {
///   (primaryAccountIdentifier, digitizeDetails) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardDigitizationResultWithCard:card
///                  primaryAccountIdentifier:NULL
///                                completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                             CardDigitizationResult * _Nonnull digitizeDetails) {
///   
/// }];
///
/// \endcodenote:
/// Using Primary Account Identifier
/// \code
/// TPCSDK.getCardDigitizationResult(primaryAccountIdentifier: cardIdentifier) {
///   (primaryAccountIdentifier, digitizeDetails) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardDigitizationResultWithCard:NULL
///                  primaryAccountIdentifier:cardIdentifier
///                                completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                             CardDigitizationResult * _Nonnull digitizeResult) {
/// }];
///
/// \endcode\param card <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload, or <code>FundingCard</code> object initialized with Primary Account Identifier
///
/// \param primaryAccountIdentifier Primary Account Identifier of the payment card
///
/// \param digitizeDetails See <code>CardDigitizationResult</code>
///
+ (void)getCardDigitizationResultWithCard:(FundingCard * _Nullable)card primaryAccountIdentifier:(NSString * _Nullable)primaryAccountIdentifier completion:(void (^ _Nonnull)(NSString * _Nullable, CardDigitizationResult * _Nonnull))completion;
/// Displays an interface that lets users add cards to Apple Pay from within your app.
/// \code
/// TPCSDK.provision(fromController: self,
///                  primaryAccountSuffix: "1234",
///                  cardholderName: "John Doe",
///                  scheme: CardScheme.Mastercard,
///                  encryptedPayload: "PKCS7 encrypted PAN",
///                  authorizationCode: "code",
///                  provisionDelegate: self)
///
/// \endcode\code
/// [TPCSDK provisionFromController:self
///            primaryAccountSuffix:@"1234"
///                  cardholderName:@"John Doe"
///                          scheme:CardSchemeMastercard
///                encryptedPayload:@"PKCS7 encrypted PAN"
///               authorizationCode:@"code"
///               provisionDelegate:self];
///
/// \endcode\param fromController The calling UIViewController
///
/// \param primaryAccountSuffix The last four or five digits of the cardâs number
///
/// \param cardholderName The name of the person as shown on the card
///
/// \param scheme See <code>CardScheme</code>
///
/// \param encryptedPayload Card information encrypted in PKCS7
///
/// \param authorizationCode Authorization code
///
/// \param provisionDelegate See <code>TPCSDKProvisionDelegate</code>
///
+ (void)provisionFromController:(UIViewController * _Nonnull)controller primaryAccountSuffix:(NSString * _Nonnull)primaryAccountSuffix cardholderName:(NSString * _Nullable)cardholderName scheme:(enum CardScheme)scheme encryptedPayload:(NSString * _Nonnull)encryptedPayload authorizationCode:(NSString * _Nonnull)authorizationCode provisionDelegate:(id <TPCSDKProvisionDelegate> _Nullable)provisionDelegate;
/// Get pending activation payment pass from local and remote device
/// note:
/// Using <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
/// \code
/// TPCSDK.getPendingActivationPass(card: card) {
///   (pendingActivationPass) in
/// }
///
/// \endcode\code
/// [TPCSDK getPendingActivationPassWithCard:card
///                               completion:^(PendingActivationPass * _Nullable pendingActivationPass) {
/// }];
///
/// \endcode\param card See <code>FundingCard</code>
///
/// \param pendingActivationPass See <code>PendingActivationPass</code>
///
+ (void)getPendingActivationPassWithCard:(FundingCard * _Nonnull)card completion:(void (^ _Nonnull)(PendingActivationPass * _Nullable))completion;
/// Activate payment pass
/// note:
/// Use PKPass from <code>TPCSDK.getPendingActivationPass</code> and <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload. Authorization code and nonce must be provided.
/// \code
/// TPCSDK.activatePass(pass: localPass,
///                     card: card,
///                     authorizationCode: authorizationCode,
///                     nonce: nonce) {
///   (success, error) in
/// }
///
/// \endcode\code
/// [TPCSDK activatePassWithPass:pass
///                         card:card
///            authorizationCode:code
///                        nonce:nonce
///                   completion:^(BOOL success, NSError * _Nullable error) {
/// }];
///
/// \endcode\param pass See <code>PassKit.PKPass</code>
///
/// \param card See <code>FundingCard</code>
///
/// \param authorizationCode Authorization code
///
/// \param nonce Nonce
///
/// \param success True if the pass was authorized; otherwise, False.
///
/// \param error Description of the error
///
+ (void)activatePassWithPass:(PKPass * _Nonnull)pass card:(FundingCard * _Nonnull)card authorizationCode:(NSString * _Nonnull)authorizationCode nonce:(NSString * _Nonnull)nonce completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Get the list of tokens for the given card
/// note:
/// Using <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
/// \code
/// TPCSDK.getTokens(card: card) {
///   (tokenList) in
/// }
///
/// \endcode\code
/// [TPCSDK getTokensWithCard:card
///                completion:^(NSArray<Token *> * _Nullable tokenList) {
/// }];
///
/// \endcode\param card See <code>FundingCard</code>
///
/// \param tokenList See <code>Token</code>
///
+ (void)getTokensWithCard:(FundingCard * _Nonnull)card completion:(void (^ _Nonnull)(NSArray<Token *> * _Nullable))completion;
/// Get asset for the given token requestor asset ID
/// \code
/// TPCSDK.getTokenRequestorAsset(assetId: tokenRequestorId) {
///   (tokenRequestorAsset) in
/// }
///
/// \endcode\code
/// [TPCSDK getTokenRequestorAssetWithAssetId:id
///                                completion:^(NSArray<TokenRequestorAsset *> * _Nullable tokenRequestorAsset) {
/// }];
///
/// \endcode\param assetId See <code>Token.TokenRequestor.id</code>
///
/// \param tokenRequestorAsset See <code>Asset</code>
///
+ (void)getTokenRequestorAssetWithAssetId:(NSString * _Nonnull)assetId completion:(void (^ _Nonnull)(NSArray<TokenRequestorAsset *> * _Nullable))completion;
/// Update token state
/// \code
/// TPCSDK.updateTokenState(tokenId: tokenId,
///                         tokenRequestorId: tokenRequestorId,
///                         scheme: scheme
///                         authorizationCode: authorizationCode,
///                         action: .Suspend) {
///   (success) in
/// }
///
/// \endcode\code
/// [TPCSDK updateTokenStateWithTokenId:tokenId
///                    tokenRequestorId:tokenRequestorId
///                              scheme:scheme
///                   authorizationCode:code
///                              action:state
///                          completion:^(BOOL success) {
/// }];
///
/// \endcode\param tokenId See <code>Token.id</code>
///
/// \param tokenRequestorId Unique identifier of the token requestor allocated by the TSP Scheme. It shall be provided for VISA scheme.
///
/// \param scheme See <code>CardScheme</code>
///
/// \param authorizationCode Authorization code provided by issuer.
///
/// \param action See <code>TokenState</code>
///
/// \param success Result from update token state
///
+ (void)updateTokenStateWithTokenId:(NSString * _Nonnull)tokenId tokenRequestorId:(NSString * _Nonnull)tokenRequestorId scheme:(enum CardScheme)scheme authorizationCode:(NSString * _Nonnull)authorizationCode action:(enum TokenState)action completion:(void (^ _Nonnull)(BOOL))completion;
/// Get cards
/// \code
/// TPCSDK.getCards(userId: userId,
///                 authorizationCode: authorizationCode,
///                 kyc: kyc) {
///   (cards) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardsWithUserId:userId
///          authorizationCode:code
///                        kyc:kyc
///                 completion:^(NSArray<CardList *> * _Nullable cardList) {
/// }];
///
/// \endcode\param userId User ID
///
/// \param authorizationCode Authorization code
///
/// \param kyc KYC
///
/// \param cards See <code>CardList</code>
///
+ (void)getCardsWithUserId:(NSString * _Nonnull)userId authorizationCode:(NSString * _Nonnull)authorizationCode kyc:(NSString * _Nonnull)kyc completion:(void (^ _Nonnull)(NSArray<CardList *> * _Nullable))completion;
/// Get asset for the given card
/// \code
/// TPCSDK.getCardAsset(cardId: cardId,
///                     kyc: kyc,
///                     size: .S) {
///   (cardAsset) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardAssetWithCardId:cardId
///                            kyc:kyc
///                           size:size
///                     completion:^(NSArray<CardAsset *> * _Nullable cardAsset) {
/// }];
///
/// \endcode\param cardId Card ID
///
/// \param kyc KYC
///
/// \param size See <code>CardAssetSize</code>
///
/// \param cardAsset See <code>CardAsset</code>
///
+ (void)getCardAssetWithCardId:(NSString * _Nonnull)cardId kyc:(NSString * _Nonnull)kyc size:(enum CardAssetSize)size completion:(void (^ _Nonnull)(NSArray<CardAsset *> * _Nullable))completion;
/// Request encrypted payload for a given funding card
/// \code
/// TPCSDK.getPayload(authorizationCode: code,
///                   cardId: cardId,
///                   kyc: kyc) {
///   (payload) in
/// }
///
/// \endcode\code
/// [TPCSDK getPayloadWithAuthorizationCode:code
///                                  cardId:cardId
///                                     kyc:kyc
///                              completion:^(NSString * _Nullable encryptedPayload) {
/// }];
///
/// \endcode\param authorizationCode Authorization code
///
/// \param cardId Card ID
///
/// \param kyc KYC
///
/// \param payload Card information encrypted in PKCS7
///
+ (void)getPayloadWithAuthorizationCode:(NSString * _Nonnull)authorizationCode cardId:(NSString * _Nonnull)cardId kyc:(NSString * _Nonnull)kyc completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
/// Request encrypted payload for a given funding card
/// \code
/// TPCSDK.getEligibleTokenRequestor(card: card,
///                                  publicKeyIdentifier: publicKeyId) {
///   (TokenRequestorList) in
/// }
///
/// \endcode\code
/// [TPCSDK getEligibleTokenRequestorWithCard:card
///                       publicKeyIdentifier:publicKeyId
///                                completion:^(NSArray<TokenRequestor *> * _Nullable tokenRequestorList) {
/// }];
///
/// \endcode\param card <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
///
/// \param publicKeyIdentifier Identifier of the key used to encrypt payload
///
/// \param tokenRequestors See <code>TokenRequestor</code>
///
+ (void)getEligibleTokenRequestorWithCard:(FundingCard * _Nonnull)card publicKeyIdentifier:(NSString * _Nonnull)publicKeyIdentifier completion:(void (^ _Nonnull)(NSArray<TokenRequestor *> * _Nullable))completion;
/// Initiate push provision to scheme
/// \code
/// TPCSDK.schemePushProvision(card: card,
///                            publicKeyIdentifier: publicKeyId,
///                            authorizationCode: code,
///                            termsAndConditionsAccepted: true,
///                            callbackUrl: callbackUrl,
///                            callbackType: callbackType,
///                            pushHandler: pushHandler) {
///   (pushUrl) in
/// }
///
/// \endcode\code
/// [TPCSDK schemePushProvisionWithCard:card
///                 publicKeyIdentifier:publicKeyId
///                   authorizationCode:code
///          termsAndConditionsAccepted:TRUE
///                         callbackUrl:callbackUrl
///                        callbackType:callbackType
///                         pushHandler:pushHandler
///                          completion:^(NSString * _Nullable pushUrl) {
/// }];
///
/// \endcode\param card <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
///
/// \param publicKeyIdentifier Identifier of the key used to encrypt payload
///
/// \param authorizationCode Authorization code
///
/// \param termsAndConditionsAccepted Terms and conditions accepted by user
///
/// \param callbackUrl URL used by the token requestor to pass control back to issuer application
///
/// \param callbackType ANDROID, IOS, or WEB
///
/// \param pushHandler Token requestor push handler
///
/// \param pushUrl Token requestor URL used for redirection
///
+ (void)schemePushProvisionWithCard:(FundingCard * _Nonnull)card publicKeyIdentifier:(NSString * _Nonnull)publicKeyIdentifier authorizationCode:(NSString * _Nonnull)authorizationCode termsAndConditionsAccepted:(BOOL)termsAndConditionsAccepted callbackUrl:(NSString * _Nonnull)callbackUrl callbackType:(NSString * _Nonnull)callbackType pushHandler:(NSString * _Nonnull)pushHandler completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PKPaymentPass;

/// Methods that let the system inform you when a push provisioning request has succeeded or failed.
SWIFT_PROTOCOL("_TtP11TPCSDKSwift23TPCSDKProvisionDelegate_")
@protocol TPCSDKProvisionDelegate <NSObject>
/// Callback when provision process from PassKit is complete
/// \param pass Payment pass created on device, nil if operation failed
///
/// \param error Error from PassKIt
///
- (void)onProvisionCompletionWithPass:(PKPaymentPass * _Nullable)pass error:(NSError * _Nullable)error;
@end


/// Token for the payment card
SWIFT_CLASS("_TtC11TPCSDKSwift5Token")
@interface Token : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Token Requestor
SWIFT_CLASS("_TtC11TPCSDKSwift14TokenRequestor")
@interface TokenRequestor : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Token requestor asset
SWIFT_CLASS("_TtC11TPCSDKSwift19TokenRequestorAsset")
@interface TokenRequestorAsset : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Token State
typedef SWIFT_ENUM(NSInteger, TokenState, open) {
/// Suspend
  TokenStateSuspend = 0,
/// Resume
  TokenStateResume = 1,
/// Delete
  TokenStateDelete = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TPCSDKSwift",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Asset data returned by <code>TPCSDK.getCardAsset(...)</code>
SWIFT_CLASS("_TtC11TPCSDKSwift9CardAsset")
@interface CardAsset : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Â Card Asset Image size
typedef SWIFT_ENUM(NSInteger, CardAssetSize, open) {
/// Small
  CardAssetSizeS = 0,
/// Medium
  CardAssetSizeM = 1,
/// Large
  CardAssetSizeL = 2,
};

enum IsCardDigitizedResult : NSInteger;
@class PKPass;

/// Card digitization result details
/// seealso:
/// <code>TPCSDK.getCardDigitizationResult(card:primaryAccountIdentifier:)</code>
SWIFT_CLASS("_TtC11TPCSDKSwift22CardDigitizationResult")
@interface CardDigitizationResult : NSObject
/// Is card digitized on local and remote devices
@property (nonatomic) enum IsCardDigitizedResult result;
/// Is card digitized on local device
@property (nonatomic) enum IsCardDigitizedResult localDevice;
/// PKPass for the card on the remote device, nil if not digitized on local device
@property (nonatomic, strong) PKPass * _Nullable localPKPass;
/// Is card digitized on remote device
@property (nonatomic) enum IsCardDigitizedResult remoteDevice;
/// PKPass for the card on remote device, nil if not digitized on remote device
@property (nonatomic, strong) PKPass * _Nullable remotePKPass;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Card list returned by <code>TPCSDK.getCardList(...)</code>
SWIFT_CLASS("_TtC11TPCSDKSwift8CardList")
@interface CardList : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Card payment network
typedef SWIFT_ENUM(NSInteger, CardScheme, open) {
/// Mastercard
  CardSchemeMastercard = 0,
/// Visa
  CardSchemeVisa = 1,
};


/// Bank application to initialize this object with <code>CardScheme</code> and encryptedPayload
/// note:
/// Initialize <code>FundingCard</code> with Mastercard and Encrypted Payload
/// \code
/// let scheme         = CardScheme.Mastercard
/// let cardPayload    = "PKCS7 encrypted PAN"
///
/// let card           = FundingCard(scheme: scheme.
///                                  encryptedPayload: cardPayload)
///
/// \endcodenote:
/// Initialize <code>FundingCard</code> with Visa and Encrypted Payload
/// \code
/// let scheme         = CardScheme.Visa
/// let cardPayload    = "PKCS7 encrypted PAN"
///
/// let card           = FundingCard(scheme: scheme.
///                                  encryptedPayload: cardPayload)
///
/// \endcodenote:
/// Initialize <code>FundingCard</code> with Primary Account Identifier
/// \code
/// let cardIdentifier = "C-12345678"
///
/// let card           = FundingCard(primaryAccountIdentifier: cardIdentifier)
///
/// \endcode
SWIFT_CLASS("_TtC11TPCSDKSwift11FundingCard")
@interface FundingCard : NSObject
/// Constructor for FundingCard using Scheme and Encrypted Payload, or using Primary Account Identifier
/// note:
/// Initialize <code>FundingCard</code> with <code>CardScheme</code> and Encrypted Payload
/// \code
/// let card = FundingCard(scheme, cardPayload)
///
/// \endcode\param scheme <code>CardScheme</code>
///
/// \param encryptedPayload Card information encrypted in PKCS7
///
- (nonnull instancetype)initWithScheme:(enum CardScheme)scheme encryptedPayload:(NSString * _Nullable)encryptedPayload OBJC_DESIGNATED_INITIALIZER;
/// Constructor for FundingCard using Scheme and Encrypted Payload, or using Primary Account Identifier
/// note:
/// Initialize <code>FundingCard</code> with Primary Account Identifier
/// \code
/// let card = FundingCard(cardIdentifier)
///
/// \endcode\param primaryAccountIdentifier Primary Account Identifier of the payment card
///
- (nonnull instancetype)initWithPrimaryAccountIdentifier:(NSString * _Nullable)primaryAccountIdentifier OBJC_DESIGNATED_INITIALIZER;
/// Card information encrypted in PKCS7 using TIG TSH Certificate
@property (nonatomic, copy) NSString * _Nullable encryptedPayload;
/// Primary Account Identifier of the payment card
@property (nonatomic, copy) NSString * _Nullable primaryAccountIdentifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Card Digitization Result
typedef SWIFT_ENUM(NSInteger, IsCardDigitizedResult, open) {
/// The current device or an attached device both supports adding this payment card and does not already contain a payment card with the supplied encrypted payload or primary account identifier.
  IsCardDigitizedResultCardNotDigitized = 0,
/// The current device or an attached device both contain a payment card with the supplied encrypted payload or primary account identifier.
  IsCardDigitizedResultCardAlreadyDigitized = 1,
/// Error while retrieving card digitization result.
  IsCardDigitizedResultError = 2,
};


/// Pending activation payment pass from local and remote device
SWIFT_CLASS("_TtC11TPCSDKSwift21PendingActivationPass")
@interface PendingActivationPass : NSObject
/// PKPass for the card on local device, nil if not digitized on local device
@property (nonatomic, strong) PKPass * _Nullable localPKPass;
/// PKPass for the card on remote device, nil if not digitized on remote device
@property (nonatomic, strong) PKPass * _Nullable remotePKPass;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Push method
SWIFT_CLASS("_TtC11TPCSDKSwift10PushMethod")
@interface PushMethod : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// SDK configuration result
typedef SWIFT_ENUM(NSInteger, SdkConfigureResult, open) {
/// SDK is configured for TPCSDK Push Provisioning
  SdkConfigureResultOK = 0,
/// SDK configuration failed due to Apple Pay not supported by the device or disabled by parental control
  SdkConfigureResultFail = 1,
/// SDK configuration failed
  SdkConfigureResultError = 2,
};

/// TPCSDK variant
typedef SWIFT_ENUM(NSInteger, SdkVariant, open) {
/// Pre-Production Environment
  SdkVariantPPROD = 0,
/// Production Environment
  SdkVariantPROD = 1,
};

@class UIViewController;
@protocol TPCSDKProvisionDelegate;
@class Token;
@class TokenRequestorAsset;
enum TokenState : NSInteger;
@class TokenRequestor;

/// TPCSDK for iOS
SWIFT_CLASS("_TtC11TPCSDKSwift6TPCSDK")
@interface TPCSDK : NSObject
/// This is the version of the TPCSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tpcsdkVersion;)
+ (NSString * _Nonnull)tpcsdkVersion SWIFT_WARN_UNUSED_RESULT;
/// Reset SDK
+ (void)reset;
/// Configure SDK with <code>SdkVariant</code>  and Issuer ID.
/// note:
/// Using <code>SdkVariant</code> and Issuer ID
/// \code
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///   // Override point for customization after application launch.
///
///   let tpcVariant = SdkVariant.PROD
///   let tpcIssuerId = "TPC_ISSUER"
///   let result = TPCSDK.configure(variant: tpcVariant,
///                                issuerId: tpcIssuerId)
///   
///   return true
/// }
///
/// \endcode\code
/// - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
///   // Override point for [customization after application launch.
///   
///   SdkVariant tpcVariant = SdkVariantPROD;
///   NSString * tpcIssuerId = @"TPC_ISSUER";
///   SdkConfigureResult result = [TPCSDK configureWithVariant:tpcVariant
///                                                   issuerId:tpcIssuerId];
///
///   return YES;
/// }
///
/// \endcode\param variant Use SdkVariant.PPROD for Pre-Production server and SdkVariant.PROD for Production server.
///
/// \param issuerId Issuer ID is provided to you during onboarding process.
///
///
/// returns:
/// See <code>SdkConfigureResult</code>
+ (enum SdkConfigureResult)configureWithVariant:(enum SdkVariant)variant issuerId:(NSString * _Nonnull)issuerId SWIFT_WARN_UNUSED_RESULT;
/// Configure SDK with Server URL and Issuer ID.
/// note:
/// Using Server URL and Issuer ID
/// \code
/// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
///   // Override point for customization after application launch.
///
///   let tpcServerUrl = "https://hapi.dbp.thalescloud.io/mg/tpc"
///   let tpcIssuerId  = "TPC_ISSUER"
///   let result = TPCSDK.configure(url: tpcServerUrl,
///                                 issuerId: tpcIssuerId)
///   
///   return true
/// }
///
/// \endcode\code
/// - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
///   // Override point for [customization after application launch.
///   
///   NSString * tpcServerUrl = @"https://hapi.dbp.thalescloud.io/mg/tpc";
///   NSString * tpcIssuerId = @"TPC_ISSUER";
///   SdkConfigureResult result = [TPCSDK configureWithUrl:tpcServerUrl
///                                               issuerId:tpcIssuerId];
///
///   return YES;
/// }
///
/// \endcode\param url Provide server URL without trailing slash (example: https://hapi.dbp.thalescloud.io).
///
/// \param issuerId Issuer ID is provided to you during onboarding process.
///
///
/// returns:
/// See <code>SdkConfigureResult</code>
+ (enum SdkConfigureResult)configureWithUrl:(NSString * _Nonnull)url issuerId:(NSString * _Nonnull)issuerId SWIFT_WARN_UNUSED_RESULT;
/// Check card digitization status with <code>FundingCard</code> or Primary Account Identifier.
/// important:
/// Display Add to Apple Wallet button if digitizeResult is <code>IsCardDigitizedResult.CardNotDigitized</code>.
/// seealso:
/// <code>TPCSDK.getCardDigitizationResult(card:completion:)</code> for details of card digitization result on current device or an attached device.
/// note:
/// Using <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
/// \code
/// TPCSDK.isCardDigitized(card: card) {
///   (primaryAccountIdentifier, digitizeResult) in
///   
///   switch digitizeResult {
///   case .CardNotDigitized:
///     // TODO: Display Add to Apple Wallet button
///     break
///   default: break
///   }
/// }
///
/// \endcode\code
/// [TPCSDK isCardDigitizedWithCard:card
///        primaryAccountIdentifier:NULL
///                      completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                   enum IsCardDigitizedResult digitizeResult) {
///   switch(digitizeResult) {
///     case IsCardDigitizedResultCardNotDigitized:
///       // TODO: Display Add to Apple Wallet button
///       break;
///       
///     default:
///       break;
///   }
/// }];
///
/// \endcodenote:
/// Using <code>FundingCard</code> object initialized with Primary Account Identifier
/// \code
/// TPCSDK.isCardDigitized(card: card) {
///   (primaryAccountIdentifier, digitizeResult) in
///   
///   switch digitizeResult {
///   case .CardNotDigitized:
///     // TODO: Display Add to Apple Wallet button
///     break
///   default: break
///   }
/// }
///
/// \endcode\code
/// [TPCSDK isCardDigitizedWithCard:card
///        primaryAccountIdentifier:NULL
///                      completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                   enum IsCardDigitizedResult digitizeResult) {
///   switch(digitizeResult) {
///     case IsCardDigitizedResultCardNotDigitized:
///       // TODO: Display Add to Apple Wallet button
///       break;
///       
///     default:
///       break;
///   }
/// }];
///
/// \endcodenote:
/// Using Primary Account Identifier
/// \code
/// TPCSDK.isCardDigitized(primaryAccountIdentifier: cardIdentifier) {
///   (digitizeResult) in
///   
///   switch digitizeResult {
///   case .CardNotDigitized:
///     // TODO: Display Add to Apple Wallet button
///     break
///   default:
///     // TODO: Hide Add to Apple Wallet button
///     break
///   }
/// }
///
/// \endcode\code
/// [TPCSDK isCardDigitizedWithCard:NULL
///        primaryAccountIdentifier:cardIdentifier
///                      completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                   enum IsCardDigitizedResult digitizeResult) {
///   switch(digitizeResult) {
///     case IsCardDigitizedResultCardNotDigitized:
///       // TODO: Display Add to Apple Wallet button
///       break;
///       
///     default:
///       // TODO: Hide Add to Apple Wallet button
///       break;
///   }
/// }];
///
/// \endcode\param card <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload, or <code>FundingCard</code> object initialized with Primary Account Identifier
///
/// \param primaryAccountIdentifier Primary Account Identifier of the payment card
///
/// \param digitizeResult See <code>IsCardDigitizedResult</code>
///
+ (void)isCardDigitizedWithCard:(FundingCard * _Nullable)card primaryAccountIdentifier:(NSString * _Nullable)primaryAccountIdentifier completion:(void (^ _Nonnull)(NSString * _Nullable, enum IsCardDigitizedResult))completion;
/// Get card digitization status, current device digitization status, current device digitized <code>PKPass</code> if available, remote device digitization status, and remote device digitized <code>PKPass</code> if available with Primary Account Identifier.
/// note:
/// Using <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
/// \code
/// TPCSDK.getCardDigitizationResult(card: card) {
///   (primaryAccountIdentifier, digitizeDetails) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardDigitizationResultWithCard:card
///                  primaryAccountIdentifier:NULL
///                                completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                             CardDigitizationResult * _Nonnull digitizeDetails) {
///   
/// }];
///
/// \endcodenote:
/// Using <code>FundingCard</code> object initialized with Primary Account Identifier
/// \code
/// TPCSDK.getCardDigitizationResult(card: card) {
///   (primaryAccountIdentifier, digitizeDetails) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardDigitizationResultWithCard:card
///                  primaryAccountIdentifier:NULL
///                                completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                             CardDigitizationResult * _Nonnull digitizeDetails) {
///   
/// }];
///
/// \endcodenote:
/// Using Primary Account Identifier
/// \code
/// TPCSDK.getCardDigitizationResult(primaryAccountIdentifier: cardIdentifier) {
///   (primaryAccountIdentifier, digitizeDetails) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardDigitizationResultWithCard:NULL
///                  primaryAccountIdentifier:cardIdentifier
///                                completion:^(NSString * _Nullable primaryAccountIdentifier,
///                                             CardDigitizationResult * _Nonnull digitizeResult) {
/// }];
///
/// \endcode\param card <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload, or <code>FundingCard</code> object initialized with Primary Account Identifier
///
/// \param primaryAccountIdentifier Primary Account Identifier of the payment card
///
/// \param digitizeDetails See <code>CardDigitizationResult</code>
///
+ (void)getCardDigitizationResultWithCard:(FundingCard * _Nullable)card primaryAccountIdentifier:(NSString * _Nullable)primaryAccountIdentifier completion:(void (^ _Nonnull)(NSString * _Nullable, CardDigitizationResult * _Nonnull))completion;
/// Displays an interface that lets users add cards to Apple Pay from within your app.
/// \code
/// TPCSDK.provision(fromController: self,
///                  primaryAccountSuffix: "1234",
///                  cardholderName: "John Doe",
///                  scheme: CardScheme.Mastercard,
///                  encryptedPayload: "PKCS7 encrypted PAN",
///                  authorizationCode: "code",
///                  provisionDelegate: self)
///
/// \endcode\code
/// [TPCSDK provisionFromController:self
///            primaryAccountSuffix:@"1234"
///                  cardholderName:@"John Doe"
///                          scheme:CardSchemeMastercard
///                encryptedPayload:@"PKCS7 encrypted PAN"
///               authorizationCode:@"code"
///               provisionDelegate:self];
///
/// \endcode\param fromController The calling UIViewController
///
/// \param primaryAccountSuffix The last four or five digits of the cardâs number
///
/// \param cardholderName The name of the person as shown on the card
///
/// \param scheme See <code>CardScheme</code>
///
/// \param encryptedPayload Card information encrypted in PKCS7
///
/// \param authorizationCode Authorization code
///
/// \param provisionDelegate See <code>TPCSDKProvisionDelegate</code>
///
+ (void)provisionFromController:(UIViewController * _Nonnull)controller primaryAccountSuffix:(NSString * _Nonnull)primaryAccountSuffix cardholderName:(NSString * _Nullable)cardholderName scheme:(enum CardScheme)scheme encryptedPayload:(NSString * _Nonnull)encryptedPayload authorizationCode:(NSString * _Nonnull)authorizationCode provisionDelegate:(id <TPCSDKProvisionDelegate> _Nullable)provisionDelegate;
/// Get pending activation payment pass from local and remote device
/// note:
/// Using <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
/// \code
/// TPCSDK.getPendingActivationPass(card: card) {
///   (pendingActivationPass) in
/// }
///
/// \endcode\code
/// [TPCSDK getPendingActivationPassWithCard:card
///                               completion:^(PendingActivationPass * _Nullable pendingActivationPass) {
/// }];
///
/// \endcode\param card See <code>FundingCard</code>
///
/// \param pendingActivationPass See <code>PendingActivationPass</code>
///
+ (void)getPendingActivationPassWithCard:(FundingCard * _Nonnull)card completion:(void (^ _Nonnull)(PendingActivationPass * _Nullable))completion;
/// Activate payment pass
/// note:
/// Use PKPass from <code>TPCSDK.getPendingActivationPass</code> and <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload. Authorization code and nonce must be provided.
/// \code
/// TPCSDK.activatePass(pass: localPass,
///                     card: card,
///                     authorizationCode: authorizationCode,
///                     nonce: nonce) {
///   (success, error) in
/// }
///
/// \endcode\code
/// [TPCSDK activatePassWithPass:pass
///                         card:card
///            authorizationCode:code
///                        nonce:nonce
///                   completion:^(BOOL success, NSError * _Nullable error) {
/// }];
///
/// \endcode\param pass See <code>PassKit.PKPass</code>
///
/// \param card See <code>FundingCard</code>
///
/// \param authorizationCode Authorization code
///
/// \param nonce Nonce
///
/// \param success True if the pass was authorized; otherwise, False.
///
/// \param error Description of the error
///
+ (void)activatePassWithPass:(PKPass * _Nonnull)pass card:(FundingCard * _Nonnull)card authorizationCode:(NSString * _Nonnull)authorizationCode nonce:(NSString * _Nonnull)nonce completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Get the list of tokens for the given card
/// note:
/// Using <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
/// \code
/// TPCSDK.getTokens(card: card) {
///   (tokenList) in
/// }
///
/// \endcode\code
/// [TPCSDK getTokensWithCard:card
///                completion:^(NSArray<Token *> * _Nullable tokenList) {
/// }];
///
/// \endcode\param card See <code>FundingCard</code>
///
/// \param tokenList See <code>Token</code>
///
+ (void)getTokensWithCard:(FundingCard * _Nonnull)card completion:(void (^ _Nonnull)(NSArray<Token *> * _Nullable))completion;
/// Get asset for the given token requestor asset ID
/// \code
/// TPCSDK.getTokenRequestorAsset(assetId: tokenRequestorId) {
///   (tokenRequestorAsset) in
/// }
///
/// \endcode\code
/// [TPCSDK getTokenRequestorAssetWithAssetId:id
///                                completion:^(NSArray<TokenRequestorAsset *> * _Nullable tokenRequestorAsset) {
/// }];
///
/// \endcode\param assetId See <code>Token.TokenRequestor.id</code>
///
/// \param tokenRequestorAsset See <code>Asset</code>
///
+ (void)getTokenRequestorAssetWithAssetId:(NSString * _Nonnull)assetId completion:(void (^ _Nonnull)(NSArray<TokenRequestorAsset *> * _Nullable))completion;
/// Update token state
/// \code
/// TPCSDK.updateTokenState(tokenId: tokenId,
///                         tokenRequestorId: tokenRequestorId,
///                         scheme: scheme
///                         authorizationCode: authorizationCode,
///                         action: .Suspend) {
///   (success) in
/// }
///
/// \endcode\code
/// [TPCSDK updateTokenStateWithTokenId:tokenId
///                    tokenRequestorId:tokenRequestorId
///                              scheme:scheme
///                   authorizationCode:code
///                              action:state
///                          completion:^(BOOL success) {
/// }];
///
/// \endcode\param tokenId See <code>Token.id</code>
///
/// \param tokenRequestorId Unique identifier of the token requestor allocated by the TSP Scheme. It shall be provided for VISA scheme.
///
/// \param scheme See <code>CardScheme</code>
///
/// \param authorizationCode Authorization code provided by issuer.
///
/// \param action See <code>TokenState</code>
///
/// \param success Result from update token state
///
+ (void)updateTokenStateWithTokenId:(NSString * _Nonnull)tokenId tokenRequestorId:(NSString * _Nonnull)tokenRequestorId scheme:(enum CardScheme)scheme authorizationCode:(NSString * _Nonnull)authorizationCode action:(enum TokenState)action completion:(void (^ _Nonnull)(BOOL))completion;
/// Get cards
/// \code
/// TPCSDK.getCards(userId: userId,
///                 authorizationCode: authorizationCode,
///                 kyc: kyc) {
///   (cards) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardsWithUserId:userId
///          authorizationCode:code
///                        kyc:kyc
///                 completion:^(NSArray<CardList *> * _Nullable cardList) {
/// }];
///
/// \endcode\param userId User ID
///
/// \param authorizationCode Authorization code
///
/// \param kyc KYC
///
/// \param cards See <code>CardList</code>
///
+ (void)getCardsWithUserId:(NSString * _Nonnull)userId authorizationCode:(NSString * _Nonnull)authorizationCode kyc:(NSString * _Nonnull)kyc completion:(void (^ _Nonnull)(NSArray<CardList *> * _Nullable))completion;
/// Get asset for the given card
/// \code
/// TPCSDK.getCardAsset(cardId: cardId,
///                     kyc: kyc,
///                     size: .S) {
///   (cardAsset) in
/// }
///
/// \endcode\code
/// [TPCSDK getCardAssetWithCardId:cardId
///                            kyc:kyc
///                           size:size
///                     completion:^(NSArray<CardAsset *> * _Nullable cardAsset) {
/// }];
///
/// \endcode\param cardId Card ID
///
/// \param kyc KYC
///
/// \param size See <code>CardAssetSize</code>
///
/// \param cardAsset See <code>CardAsset</code>
///
+ (void)getCardAssetWithCardId:(NSString * _Nonnull)cardId kyc:(NSString * _Nonnull)kyc size:(enum CardAssetSize)size completion:(void (^ _Nonnull)(NSArray<CardAsset *> * _Nullable))completion;
/// Request encrypted payload for a given funding card
/// \code
/// TPCSDK.getPayload(authorizationCode: code,
///                   cardId: cardId,
///                   kyc: kyc) {
///   (payload) in
/// }
///
/// \endcode\code
/// [TPCSDK getPayloadWithAuthorizationCode:code
///                                  cardId:cardId
///                                     kyc:kyc
///                              completion:^(NSString * _Nullable encryptedPayload) {
/// }];
///
/// \endcode\param authorizationCode Authorization code
///
/// \param cardId Card ID
///
/// \param kyc KYC
///
/// \param payload Card information encrypted in PKCS7
///
+ (void)getPayloadWithAuthorizationCode:(NSString * _Nonnull)authorizationCode cardId:(NSString * _Nonnull)cardId kyc:(NSString * _Nonnull)kyc completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
/// Request encrypted payload for a given funding card
/// \code
/// TPCSDK.getEligibleTokenRequestor(card: card,
///                                  publicKeyIdentifier: publicKeyId) {
///   (TokenRequestorList) in
/// }
///
/// \endcode\code
/// [TPCSDK getEligibleTokenRequestorWithCard:card
///                       publicKeyIdentifier:publicKeyId
///                                completion:^(NSArray<TokenRequestor *> * _Nullable tokenRequestorList) {
/// }];
///
/// \endcode\param card <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
///
/// \param publicKeyIdentifier Identifier of the key used to encrypt payload
///
/// \param tokenRequestors See <code>TokenRequestor</code>
///
+ (void)getEligibleTokenRequestorWithCard:(FundingCard * _Nonnull)card publicKeyIdentifier:(NSString * _Nonnull)publicKeyIdentifier completion:(void (^ _Nonnull)(NSArray<TokenRequestor *> * _Nullable))completion;
/// Initiate push provision to scheme
/// \code
/// TPCSDK.schemePushProvision(card: card,
///                            publicKeyIdentifier: publicKeyId,
///                            authorizationCode: code,
///                            termsAndConditionsAccepted: true,
///                            callbackUrl: callbackUrl,
///                            callbackType: callbackType,
///                            pushHandler: pushHandler) {
///   (pushUrl) in
/// }
///
/// \endcode\code
/// [TPCSDK schemePushProvisionWithCard:card
///                 publicKeyIdentifier:publicKeyId
///                   authorizationCode:code
///          termsAndConditionsAccepted:TRUE
///                         callbackUrl:callbackUrl
///                        callbackType:callbackType
///                         pushHandler:pushHandler
///                          completion:^(NSString * _Nullable pushUrl) {
/// }];
///
/// \endcode\param card <code>FundingCard</code> object initialized with <code>CardScheme</code> and Encrypted Payload
///
/// \param publicKeyIdentifier Identifier of the key used to encrypt payload
///
/// \param authorizationCode Authorization code
///
/// \param termsAndConditionsAccepted Terms and conditions accepted by user
///
/// \param callbackUrl URL used by the token requestor to pass control back to issuer application
///
/// \param callbackType ANDROID, IOS, or WEB
///
/// \param pushHandler Token requestor push handler
///
/// \param pushUrl Token requestor URL used for redirection
///
+ (void)schemePushProvisionWithCard:(FundingCard * _Nonnull)card publicKeyIdentifier:(NSString * _Nonnull)publicKeyIdentifier authorizationCode:(NSString * _Nonnull)authorizationCode termsAndConditionsAccepted:(BOOL)termsAndConditionsAccepted callbackUrl:(NSString * _Nonnull)callbackUrl callbackType:(NSString * _Nonnull)callbackType pushHandler:(NSString * _Nonnull)pushHandler completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PKPaymentPass;

/// Methods that let the system inform you when a push provisioning request has succeeded or failed.
SWIFT_PROTOCOL("_TtP11TPCSDKSwift23TPCSDKProvisionDelegate_")
@protocol TPCSDKProvisionDelegate <NSObject>
/// Callback when provision process from PassKit is complete
/// \param pass Payment pass created on device, nil if operation failed
///
/// \param error Error from PassKIt
///
- (void)onProvisionCompletionWithPass:(PKPaymentPass * _Nullable)pass error:(NSError * _Nullable)error;
@end


/// Token for the payment card
SWIFT_CLASS("_TtC11TPCSDKSwift5Token")
@interface Token : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Token Requestor
SWIFT_CLASS("_TtC11TPCSDKSwift14TokenRequestor")
@interface TokenRequestor : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Token requestor asset
SWIFT_CLASS("_TtC11TPCSDKSwift19TokenRequestorAsset")
@interface TokenRequestorAsset : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Token State
typedef SWIFT_ENUM(NSInteger, TokenState, open) {
/// Suspend
  TokenStateSuspend = 0,
/// Resume
  TokenStateResume = 1,
/// Delete
  TokenStateDelete = 2,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
